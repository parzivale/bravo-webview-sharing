/**
 * A parser for the server-sent events stream format.
 *
 * Note that this parser does not handle text decoding! To do it correctly, use a streaming text decoder, since the
 * stream could be split up mid-Unicode character, and decoding each chunk at once could lead to incorrect results.
 *
 * This parser is used by streaming chunks in using the {@link push} method, and then calling the {@link end} method
 * when the stream has ended.
 */
declare class EventStreamParser {
    /** The part of the stream not yet processed because we're waiting for more data to come in. */
    private streamBuffer;
    /** The last seen event ID. */
    private lastEventId;
    /**
     * A callback which will be called for each new event parsed.
     */
    onEvent: (data: string, eventType: string, lastEventId: string) => unknown;
    /**
     * Construct a new parser for a single stream.
     * @param onEvent A callback which will be called for each new event parsed. The parameters in order are the
     * event data, the event type, and the last seen event ID. This may be called none, once, or many times per push()
     * call, and may be called from the end() call.
     */
    constructor(onEvent: (data: string, eventType: string, lastEventId: string) => unknown);
    /**
     * Process a single incoming chunk of the event stream.
     */
    private _processChunk;
    /**
     * Push a new chunk of data to the parser. This may cause the {@link onEvent} callback to be called, possibly
     * multiple times depending on the number of events contained within the chunk.
     * @param chunk The incoming chunk of data.
     */
    push(chunk: string): void;
    /**
     * Indicate that the stream has ended.
     */
    end(): void;
}
export default EventStreamParser;
